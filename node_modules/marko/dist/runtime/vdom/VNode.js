/* jshint newcap:false */
function VNode() {}

VNode.prototype = {
  bP_: function (finalChildCount, ownerComponent) {
    this.cf_ = finalChildCount;
    this.cg_ = 0;
    this.bW_ = null;
    this.ch_ = null;
    this.bT_ = null;
    this.bU_ = null;
    this.aU_ = ownerComponent;
  },

  get a_() {
    var firstChild = this.bW_;

    if (firstChild && firstChild.bV_) {
      var nestedFirstChild = firstChild.a_;
      // The first child is a DocumentFragment node.
      // If the DocumentFragment node has a first child then we will return that.
      // Otherwise, the DocumentFragment node is not *really* the first child and
      // we need to skip to its next sibling
      return nestedFirstChild || firstChild.b_;
    }

    return firstChild;
  },

  get b_() {
    var nextSibling = this.bU_;

    if (nextSibling) {
      if (nextSibling.bV_) {
        var firstChild = nextSibling.a_;
        return firstChild || nextSibling.b_;
      }
    } else {
      var parentNode = this.bT_;
      if (parentNode && parentNode.bV_) {
        return parentNode.b_;
      }
    }

    return nextSibling;
  },

  bI_: function (child) {
    this.cg_++;

    if (this.bY_ === "textarea") {
      if (child.ci_) {
        var childValue = child.bQ_;
        this.bZ_ = (this.bZ_ || "") + childValue;
      } else if (child.t_ || child.s_) {
        this.cj_ = true;
      } else {
        throw TypeError();
      }
    } else {
      var lastChild = this.ch_;

      child.bT_ = this;

      if (lastChild) {
        lastChild.bU_ = child;
      } else {
        this.bW_ = child;
      }

      this.ch_ = child;
    }

    return child;
  },

  ca_: function finishChild() {
    if (this.cg_ === this.cf_ && this.bT_) {
      return this.bT_.ca_();
    } else {
      return this;
    }
  }

  // ,toJSON: function() {
  //     var clone = Object.assign({
  //         nodeType: this.nodeType
  //     }, this);
  //
  //     for (var k in clone) {
  //         if (k.startsWith('_')) {
  //             delete clone[k];
  //         }
  //     }
  //     delete clone._nextSibling;
  //     delete clone._lastChild;
  //     delete clone.parentNode;
  //     return clone;
  // }
};

module.exports = VNode;